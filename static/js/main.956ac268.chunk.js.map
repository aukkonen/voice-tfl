{"version":3,"sources":["App.js","index.js"],"names":["stations","sort","s1","s2","label","localeCompare","stationNames","concat","map","station","replace","stationNaptan","naptan","NavBar","props","className","onClick","setActiveView","SearchForm","options","displayNames","changeOnEntityType","value","from","onChange","newValue","setFrom","to","setTo","setTimeType","console","log","time","setTime","parseEndpoints","endpoints","join","RouteOption","option","opt","directions","stationName","name","toLowerCase","isLast","Leg","leg","routeOptions","idx","optIdx","length","arrivalPoint","commonName","Journey","journey","fare","totalCost","toFixed","num","duration","parseTime","startDateTime","arrivalDateTime","legs","departurePoint","ResultList","data","journeys","PlanView","timeType","speechState","SpeechState","NoAudioConsent","NoAudioConsentInfo","fetching","HelpView","href","dateTimeStr","Date","toTimeString","substring","App","useSpeechContext","segment","useState","undefined","setData","setFetching","activeView","useEffect","isFinal","apiTime","replaceAll","startsWith","timeIs","url","fetch","method","then","res","json","window","postMessage","type","success","callApi","Starting","Recording","entities","ReactDOM","render","appId","placement","formatText","intro","captureKey","document","getElementById"],"mappings":"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","file":"static/js/main.956ac268.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { useSpeechContext, SpeechState } from \"@speechly/react-client\";\nimport { VoiceSelect, VoiceInput, VoiceToggle } from '@speechly/react-voice-forms'\nimport './capsule.css'\nimport { stations } from \"./stations.json\";\n\nstations.sort((s1, s2) => {return s1.label.localeCompare(s2.label)});\nconst stationNames = [''].concat(stations.map(station => {return station.label.replace(/ Station$/i, '')}));\nconst stationNaptan = [''].concat(stations.map(station => {return station.naptan}));\n\nconst PLAN_JOURNEY_VIEW = 1;\nconst HELP_VIEW = 2;\n\nfunction NavBar(props) {\n  return (\n    <header className=\"navbar\">\n      <div className=\"navbar__item\" onClick={() => props.setActiveView(PLAN_JOURNEY_VIEW)}>Plan Journey</div>\n      <div className='navbar__item' onClick={() => props.setActiveView(HELP_VIEW)}>What is this?</div>\n    </header>\n  )\n}\n\nfunction SearchForm(props) {\n  return (\n    <div>\n      <div className=\"inputFieldContainer\">\n        <VoiceSelect\n          label=\"from\"\n          options={stationNaptan}\n          displayNames={stationNames}\n          changeOnEntityType=\"from\"\n          value={props.from}\n          onChange={(newValue) => props.setFrom(newValue)}\n        />\n      </div>\n      <div className=\"inputFieldContainer\">\n        <VoiceSelect\n          label=\"to\"\n          options={stationNaptan}\n          displayNames={stationNames}\n          changeOnEntityType=\"to\"\n          value={props.to}\n          onChange={(newValue) => props.setTo(newValue)}\n        />\n      </div>\n      <div className=\"inputFieldContainer\">\n        <VoiceToggle\n          options={[\"departure\", \"arrival\"]}\n          displayNames={[\"Departure\", \"Arrival\"]}\n          changeOnEntityType={[\"depart_prepo\", \"arrive_prepo\"]}\n          onChange={(newValue) => {\n            if (newValue === \"departure\") {\n              props.setTimeType(\"departing\");\n              console.log('set timeType to departing');\n            }\n            else if (newValue === \"arrival\") {\n              props.setTimeType(\"arriving\");\n              console.log('set timeType to arriving');\n            }\n          }}\n        />\n        <VoiceInput\n          label=\"Time\"\n          value={props.time}\n          changeOnEntityType=\"time\"\n          onChange={(newValue) => {\n            console.log('seeting new time value', newValue);\n            props.setTime(newValue);\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction parseEndpoints(endpoints) {\n  return \"towards \" + endpoints.join(\" or \");\n}\n\nfunction RouteOption(props) {\n  const option = props.opt;\n  const endpoints = option.directions.map(stationName => stationName.replace(\" Underground Station\", \"\"));\n  return (\n    <div className=\"routeOptionBox\">\n      <div className=\"routeOption\">\n        <div className=\"lineNameContainer\">\n          <div className={\"lineName \" + option.name.toLowerCase()}>{option.name}</div>\n        </div>\n        <div className=\"routeOptionEndpoints\">\n          {parseEndpoints(endpoints)}\n        </div>\n      </div>\n    {!props.isLast &&\n      <div>or</div>\n    }\n    </div>\n  )\n}\n\nfunction Leg(props) {\n  const leg = props.leg;\n  return (\n    <>\n    <div>\n      {leg.routeOptions.map((opt, idx) => (\n          <RouteOption key={idx} opt={opt} optIdx={idx + 1} isLast={idx === leg.routeOptions.length-1}/>\n      ))}\n    </div>\n    <div className=\"station\">\n      {leg.arrivalPoint.commonName}\n    </div>\n    </>\n  )\n}\n\nfunction Journey(props) {\n  const journey = props.journey;\n  let fare = 0.0;\n  if (journey.fare) {\n    fare = journey.fare?.totalCost/100.0;\n  }\n  fare = fare.toFixed(2);\n  return (\n    <div className=\"journey\">\n      <div className=\"journeyHeader\">\n        <div>Route suggestion {props.num}</div>\n        <div className=\"journeyHeaderDetail\">{journey.duration} minutes ({parseTime(journey.startDateTime)} &#8594; {parseTime(journey.arrivalDateTime)}) &nbsp; fare £{fare}</div>\n      </div>\n      <div>\n        <div className=\"station\">\n          {journey.legs[0].departurePoint.commonName}\n        </div>\n        {journey.legs.map((leg, idx) => (\n          <Leg key={idx} leg={leg} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nfunction ResultList(props) {\n  return (\n      <div>\n      {props.data.journeys?.map((journey, idx) => (\n          <Journey key={idx} num={idx + 1} journey={journey} />\n      ))}\n      </div>\n  )\n}\n\nfunction PlanView(props) {\n  return (\n    <div>\n      <div className=\"quickHelp\">Hold the microphone button, and say e.g.<br/> <i><b>\"from london bridge to oxford circus\"</b></i>.</div>\n      <SearchForm setFrom={props.setFrom} setTo={props.setTo} from={props.from} to={props.to} time={props.time} setTime={props.setTime} timeType={props.timeType} setTimeType={props.setTimeType} />\n      {props.speechState === SpeechState.NoAudioConsent &&\n        <NoAudioConsentInfo />\n      }\n      {props.fetching &&\n        <h1>Fetching results...</h1>\n      }\n      {(props.data && !props.fetching) &&\n        <ResultList data={props.data} />\n      }\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n    </div>\n  )\n}\n\nfunction HelpView() {\n  return (\n    <div className=\"helpText\">\n      <h1>What is this?</h1>\n      <p>Plan journeys in the London Tube network with simple voice commands. For example, <i><b>\"from london bridge to oxford circus\"</b></i>.</p>\n      <p>(It does not support addresses or other points of interest.)</p>\n      <p>You can also specify the departure or arrival time, for example: <i><b>\"from canary wharf to south kensington departing at six thirty pm\"</b></i>.</p>\n      <p>The app requires access to microphone, but it listens only when you keep the microphone button pressed.</p>\n      <p>Built with <a href=\"https://www.speechly.com\">Speechly</a> and <a href=\"https://tfl.gov.uk/info-for/open-data-users/unified-api\">Transport for London Unified API</a>.</p>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n      <br/>\n    </div>\n  )\n}\n\nfunction NoAudioConsentInfo() {\n  return (\n    <div className=\"helpText\">\n      <h1>Sorry!</h1>\n      <p>This application needs permission to use the microphone so that it can listen to your voice command. It <b>only</b> listens when you hold the microphone button pressed.</p>\n      <p>To grant the microphone permission, please re-load the page and answer \"Allow\" when the app asks to use the microphone.</p>\n    </div>\n  )\n}\n\nfunction parseTime(dateTimeStr) {\n  return new Date(dateTimeStr).toTimeString().substring(0, 5);\n}\n\nfunction callApi(from, to, time, timeIs, setData, setFetching) {\n  let url = `https://api.tfl.gov.uk/Journey/JourneyResults/${from}/to/${to}`;\n  if (time !== undefined) {\n    url = `https://api.tfl.gov.uk/Journey/JourneyResults/${from}/to/${to}?time=${time}&timeIs=${timeIs}`;\n  }\n  setFetching(true);\n  fetch(url, {method: \"GET\"})\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      setData(data);\n      setFetching(false);\n      window.postMessage({ type: \"speechhandled\", success: true }, \"*\");\n    });\n}\n\nfunction App() {\n  const { segment, speechState } = useSpeechContext();\n  const [data, setData] = useState(undefined);\n  const [fetching, setFetching] = useState(false);\n  const [activeView, setActiveView] = useState(PLAN_JOURNEY_VIEW);\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [timeType, setTimeType] = useState(\"departure\");\n\n  useEffect(() => {\n    if (segment && !segment.isFinal) {\n      return;\n    }\n    let apiTime = undefined;\n    if (time && time !== \"\") {\n      apiTime = time.replaceAll(\":\", \"\");\n    }\n    if (from.startsWith(\"9\") && to.startsWith(\"9\")) {\n      callApi(from, to, apiTime, timeType, setData, setFetching);\n    }\n  }, [segment, from, to, time]);\n\n  useEffect(() => {\n    if (activeView === HELP_VIEW &&\n        (speechState === SpeechState.Starting ||\n         speechState === SpeechState.Recording ||\n         speechState === SpeechState.NoAudioConsent)) {\n      setActiveView(PLAN_JOURNEY_VIEW);\n    }\n  }, [activeView, speechState]);\n\n  console.log(segment?.entities);\n\n  return (\n    <div className=\"App\">\n      <NavBar setActiveView={setActiveView} />\n      {activeView === PLAN_JOURNEY_VIEW &&\n       <PlanView\n         from={from}\n         to={to}\n         setFrom={setFrom}\n         setTo={setTo}\n         time={time}\n         setTime={setTime}\n         timeType={timeType}\n         setTimeType={setTimeType}\n         speechState={speechState}\n         fetching={fetching}\n         data={data}/>\n      }\n      {activeView === HELP_VIEW &&\n        <HelpView />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { SpeechProvider } from \"@speechly/react-client\";\nimport { BigTranscript, PushToTalkButton } from '@speechly/react-ui';\n\nconst appId = \"527ee381-493e-4a0e-b00d-0b91b63fe6b6\";\n\nReactDOM.render(\n    <SpeechProvider appId={appId}>\n      <BigTranscript\n        placement=\"top\"\n        formatText={false}\n      />\n      <PushToTalkButton intro=\"Hold and talk\" captureKey=\" \" placement=\"bottom\" />\n      <App />\n    </SpeechProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}